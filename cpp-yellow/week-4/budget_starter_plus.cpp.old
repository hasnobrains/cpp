#include "test_runner.h"
#include <algorithm>
#include <ctime>
#include <iomanip>
#include <iostream>
#include <numeric>
#include <sstream>
#include <vector>

using namespace std;

class Date
{
  public:
    Date() { timestamp = time(nullptr); };

    Date(int y, int m, int d)
    {
        if (NoSuchDate(y, m, d))
        {
            throw runtime_error("No such date: " + to_string(y) + to_string(m) +
                                to_string(d));
        }

        struct tm tm = {0, 0, 0, d, m - 1, y - 1900};
        timestamp = mktime(&tm);
    }

    bool NoSuchDate(int y, int m, int d)
    {
        int days[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

        if (m < 1 || m > 12)
        {
            // cerr << "Month value is invalid: " << m << endl;
            return true;
        }

        if (((y % 4 == 0) && (y % 100 != 0)) || (y % 400 == 0))
        {
            ++days[1];
        }

        if (d < 1 || d > days[m - 1])
        {
            // cerr << "Day value is invalid: " << d << endl;
            return true;
        }

        return false;
    }

    time_t GetTimestamp() const { return timestamp; }

  private:
    time_t timestamp;
};

ostream& operator<<(ostream& os, const Date& date)
{
    time_t timestamp = date.GetTimestamp();
    struct tm* tm = localtime(&timestamp);
    os << setw(4) << setfill('0') << tm->tm_year + 1900 << "-" << setw(2)
       << tm->tm_mon + 1 << "-" << setw(2) << tm->tm_mday;
    return os;
}

Date ParseDate(const string& s)
{
    stringstream ss(s);

    int year, month, day;
    char c1, c2;

    ss >> year >> c1 >> month >> c2 >> day;

    if (ss.fail() || ss.peek() != EOF || c1 != '-' || c2 != '-')
    {
        cerr << "Wrong date format: " << s << endl;
        throw runtime_error("Wrong date format: " + s);
    }

    return Date(year, month, day);
}

istream& operator>>(istream& is, Date& date)
{
    string s;

    if (is)
    {
        is >> s;
        date = ParseDate(s);
    }

    return is;
}

const int seconds_per_day = 60 * 60 * 24;

int operator-(const Date& rhs, const Date& lhs)
{
    return difftime(rhs.GetTimestamp(), lhs.GetTimestamp()) / seconds_per_day;
}

bool operator<(const Date& lhs, const Date& rhs)
{
    return lhs.GetTimestamp() < rhs.GetTimestamp();
}

bool operator<=(const Date& lhs, const Date& rhs)
{
    return lhs.GetTimestamp() <= rhs.GetTimestamp();
}

bool cmp(const pair<time_t, double>& a, const pair<time_t, double>& b)
{
    return a.first < b.first;
}

void Test()
{
    Date start_date(1700, 1, 1);
    Date end_date(2100, 1, 1);
    int day_count = end_date - start_date;
    vector<int> money(day_count, 0);

    {
        Date date(2000, 1, 2);
        int i = date - start_date;
        money[i] = 20;

        Date from(2000, 1, 1);
        Date to(2000, 1, 2);
        int from_index = from - start_date;
        int to_index = to - start_date;

        vector<int> result(to_index + 1 - from_index);
        partial_sum(money.begin() + from_index, money.begin() + to_index + 1,
                    result.begin());

        for (auto r : result)
        {
            cout << r << " ";
        }
        cout << endl;
    }
    {
        Date date(2000, 1, 2);
        int i = date - start_date;
        money[i] = 20;
        Date date2(2000, 1, 6);
        i = date2 - start_date;
        money[i] = 10;
        Date date3(2000, 1, 3);
        i = date3 - start_date;
        money[i] = 10;


        Date from(2000, 1, 1);
        Date to(2000, 1, 2);
        int from_index = from - start_date;
        int to_index = to - start_date;

        vector<int> result(to_index + 1 - from_index);
        partial_sum(money.begin() + from_index, money.begin() + to_index + 1,
                    result.begin());

        for (auto r : result)
        {
            cout << r << " ";
        }
        cout << endl;

        Date from2(2000, 1, 2);
        Date to2(2000, 1, 6);
        from_index = from2 - start_date;
        to_index = to2 - start_date;

        vector<int> result2(to_index + 1 - from_index);
        partial_sum(money.begin() + from_index, money.begin() + to_index + 1,
                    result2.begin());

        for (auto r : result2)
        {
            cout << r << " ";
        }
        cout << endl;
    }
}

int main()
{
    // TestRunner tr;
    // tr.RunTest(Test, "Test");
    // return 0;

    Date start_date(1700, 1, 1);
    Date end_date(2100, 1, 1);
    int day_count = end_date - start_date;
    vector<int> money(day_count, 0);

    int e, q;

    cin >> e;

    while (e-- > 0)
    {
        Date date;
        int amount;
        cin >> date >> amount;
        int i = date - start_date;
        money[i] = amount;
    }

    cin >> q;

    while (q-- > 0)
    {
        Date from, to;
        cin >> from >> to;

        int from_index = from - start_date;
        int to_index = to - start_date;

        vector<int> result(to_index + 1 - from_index);

        partial_sum(money.begin() + from_index, money.begin() + to_index + 1,
                    result.begin());

        cout << *(result.end() - 1) << endl;
    }
}
